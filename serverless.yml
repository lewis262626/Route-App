# NOTE: update this with your service name
service: route-app

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-api-compression # for api compression

provider:
  name: aws
  apiKeys:
    - firstkey
  usagePlan:
    throttle:
      burstLimit: 100
      rateLimit: 200
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: airports

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

custom:
    stage: ${opt:stage, self:provider.stage}
    contentEncoding:
      contentCompression: 1024

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: route
          cors: true
          method: post
          private: true
